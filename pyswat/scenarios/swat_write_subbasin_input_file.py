import os
import sys
import numpy as np

from pyearth.system.define_global_variables import *
from pyearth.toolbox.reader.text_reader_string import text_reader_string


def swat_write_subbasin_input_file(oSwat_in):
    """
    write the input files from the new parameter generated by PEST to each hru file
    """
    aParameter_subbasin = oSwat_in.aParameter_subbasin
    nvariable = aParameter_subbasin.size
    if(nvariable<1):
        #there is nothing to be replaced at all
        print("There is nothing to be updated!")
        return
    else:
        pass    
    
    iFlag_simulation = oSwat_in.iFlag_simulation
    iFlag_calibration = oSwat_in.iFlag_calibration

    
    sWorkspace_simulation_case = oSwat_in.sWorkspace_simulation_case
    sWorkspace_simulation_copy =  oSwat_in.sWorkspace_simulation_copy

    sWorkspace_calibration_case = oSwat_in.sWorkspace_calibration_case
    sWorkspace_pest_model = sWorkspace_calibration_case

    sWorkspace_data_project = oSwat_in.sWorkspace_data_project
   
    nsubbasin = oSwat_in.nsubbasin
 
    # we need to identify a list of files that are HRU defined, you can add others later
    aExtension = ['.rte', '.sub']
    #now we can add corresponding possible variables

    aRTE =['CH_K2','CH_N2' ]
    aSUB=[]
    
    aExtension = np.asarray(aExtension)
    nFile_type= aExtension.size

    #the parameter is located in the different files
    aParameter_table = np.empty( (nFile_type)  , dtype = object )

    #need a better way to control this 
    for iVariable in range(nvariable):
        sParameter_subbasin = aParameter_subbasin[iVariable]

        if sParameter_subbasin in aRTE:
            
            if( aParameter_table[0] is None  ):
                aParameter_table[0] = np.array(sParameter_subbasin)
            else:
                aParameter_table[0]= np.append(aParameter_table[0],sParameter_subbasin)            
        else:
            if sParameter_subbasin in aSUB:
                pass
            pass
                        

    aParameter_user = np.full( (nFile_type) , None , dtype = np.dtype(object) )
    aParameter_count = np.full( (nFile_type) , 0 , dtype = int )
    aParameter_flag = np.full( (nFile_type) , 0 , dtype = int )
    aParameter_index = np.full( (nFile_type) , -1 , dtype = np.dtype(object) )
  
    #then we need to define what parameters may be calibrated
    #this list should include all possible parameters in the parameter file
  
    #read parameter file
    if iFlag_simulation == 1:
        sFilename_parameter = sWorkspace_simulation_case + slash + 'subbasin.para'
    else:
        iFlag_debug = 0
        
        sPath_current = os.getcwd()


        sFilename_parameter = sPath_current + slash + 'subbasin.para'
    #check whetheher the file exist or not
    if os.path.isfile(sFilename_parameter):
        pass
    else:
        print('The file does not exist: '+sFilename_parameter)
        return

    aData_all = text_reader_string(sFilename_parameter, cDelimiter_in =',')
    aDummy = aData_all[0,:]
    nParameter = len(aDummy) - 1
    aParameter_list = aDummy[1: nParameter+1]

    aParameter_value = (aData_all[1:(nsubbasin+1),1: nParameter+1]).astype(float)
    aParameter_value = np.asarray(aParameter_value)
    
    for p in range(0, nParameter):
        para = aParameter_list[p]
        for i in range(0, nFile_type):
            aParameter_tmp = aParameter_table[i]
            if aParameter_tmp is not None:
                if para in aParameter_tmp:
                    aParameter_count[i]= aParameter_count[i]+1
                    aParameter_flag[i]=1

                    if(aParameter_count[i] ==1):
                        aParameter_index[i] = [p]
                        aParameter_user[i]= [para]
                    else:
                        aParameter_index[i] = np.append(aParameter_index[i],[p])
                        aParameter_user[i] = np.append(aParameter_user[i],[para])
                    continue

    sWorkspace_source_case = sWorkspace_simulation_copy
    sWorkspace_target_case = sWorkspace_simulation_case
    if iFlag_simulation == 1:
        pass
    else:
        sPath_current = os.getcwd()
        if (os.path.normpath(sPath_current)  == os.path.normpath(sWorkspace_pest_model)):
            print('this is the parent, no need to copy anything')
            return
        else:
            print('this is a child')
            sWorkspace_source_case = sWorkspace_simulation_copy
            sWorkspace_target_case = sWorkspace_simulation_case

    #iHru_index = 0 
    for iSubbasin in range(0, nsubbasin):
        #subbasin string
        sSubbasin = "{:05d}".format( iSubbasin + 1)
        
        #loop through all basin in this subbasin
            
        for iFile_type in range(0, nFile_type):
            #check whether these is parameter chanage or not
            sExtension = aExtension[iFile_type]
            iFlag = aParameter_flag[iFile_type]
            if( iFlag == 1):
                sFilename = sSubbasin + '0000' + sExtension
                sFilename_subbasin = sWorkspace_source_case  + slash + sFilename 
                #open the file to read
                ifs=open(sFilename_subbasin, 'rb')   
                sLine=(ifs.readline()).rstrip().decode("utf-8", 'ignore')
                #open the new file to write out
                sFilename_subbasin_out = sWorkspace_target_case + slash + sFilename
                #do we need to remove linnk first, i guess it's better to do so
                if os.path.isfile(sFilename_subbasin_out):
                    #remove it 
                    os.remove(sFilename_subbasin_out)
                else:
                    pass
                ofs=open(sFilename_subbasin_out, 'w') 
                #because of the python interface, pest will no longer interact with model files directly
                #starting from here we will                             
                aValue = aParameter_value[iSubbasin, :]
                while sLine:
                   
                    for i in range(0, aParameter_count[iFile_type]):
                        #sKey = aParameter[i]
                        if 'ch_k2' in sLine.lower() : 
                            
                            
                            dummy1 = np.array(aParameter_index[iFile_type])
                            dummy2 = np.array(aParameter_user[iFile_type])
                            dummy_index1 = np.where(dummy2 == 'CH_K2')
                            dummy_index2 = dummy1[dummy_index1][0]
                            sLine_new = "{:16.2f}".format(  aValue[dummy_index2]  )     + '    | pest parameter ch_k2 \n'
                            ofs.write(sLine_new)
                            break
                            
                        else:
                            if 'ch_n2' in sLine.lower() :
                                dummy1 = np.array(aParameter_index[iFile_type])
                                dummy2 = np.array(aParameter_user[iFile_type])
                                dummy_index1 = np.where(dummy2 == 'CH_N2')
                                dummy_index2 = dummy1[dummy_index1][0]
                                sLine_new = "{:16.2f}".format(  aValue[dummy_index2]  )     + '    | pest parameter ch_n2 \n'
                                ofs.write(sLine_new)
                                break
                                
                            else:
                                sLine = sLine + '\n'
                                ofs.write(sLine)
                                break

                    sLine0=(ifs.readline()).rstrip()
                    #print(sLine0)
                    sLine= sLine0.decode("utf-8", 'ignore')
                #close files
                ifs.close()
                ofs.close()
            else:
                #this file does not need to changed
                pass

    print('Finished writing hru file!')